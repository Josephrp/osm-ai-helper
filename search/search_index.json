{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Blueprint docs","text":"<p>Blueprints are customizable workflows that help developers build AI applications using open-source tools and models</p> <p>These docs are your companion to mastering this Blueprint.</p>"},{"location":"#built-with","title":"Built with","text":"<ul> <li>Python 3.10+</li> <li>Tool 1</li> <li>Tool 2</li> </ul>"},{"location":"#get-started-quickly","title":"\ud83d\ude80 Get Started Quickly","text":""},{"location":"#start-building-the-blueprint-in-minutes","title":"Start building the Blueprint in minutes:","text":"<ul> <li>Getting Started: Quick setup and installation instructions.</li> </ul>"},{"location":"#understand-the-system","title":"\ud83d\udd0d Understand the System","text":""},{"location":"#dive-deeper-into-how-the-blueprint-works","title":"Dive deeper into how the Blueprint works:","text":"<ul> <li>Step-by-Step Guide: A detailed breakdown of the system\u2019s design and workflow.</li> <li>API Reference: Explore the technical details of the core modules.</li> </ul>"},{"location":"#make-it-yours","title":"\ud83c\udfa8 Make It Yours","text":""},{"location":"#customize-the-blueprint-to-fit-your-needs","title":"Customize the Blueprint to fit your needs:","text":"<ul> <li>Customization Guide: Tailor project parameters to fit your needs</li> </ul>"},{"location":"#join-the-community","title":"\ud83c\udf1f Join the Community","text":""},{"location":"#help-shape-the-future-of-blueprints","title":"Help shape the future of Blueprints:","text":"<ul> <li>Future Features &amp; Contributions: Learn about exciting upcoming features and how to contribute to the project.</li> </ul> <p>Have more questions? Reach out to us on GitHub Discussions.</p>"},{"location":"#why-blueprints","title":"Why Blueprints?","text":"<p>Blueprints are more than starter code\u2014they\u2019re your gateway to building AI-powered solutions with confidence. With step-by-step guidance, modular design, and open-source tools, we make AI accessible for developers of all skill levels.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#osm_ai_helper.download_osm.download_osm","title":"<code>osm_ai_helper.download_osm.download_osm(area, output_dir, selector, discard=None)</code>","text":"<p>Download OSM elements for the given areas and selector.</p> <p>Parameters:</p> Name Type Description Default <code>output_dir</code> <code>str</code> <p>Output directory.</p> required <code>selector</code> <code>str</code> <p>OSM tag to select elements.</p> <p>Example: \"leisure=swimming_pool\"</p> required <code>area</code> <code>str</code> <p>Name of area to download. Can be city, state, country, etc.</p> required <code>discard</code> <code>Optional[dict[str, str]]</code> <p>Discard elements matching any of the given tags. Defaults to None. Example: {\"location\": \"indoor\", \"building\": \"yes\"}</p> <code>None</code> Source code in <code>src/osm_ai_helper/download_osm.py</code> <pre><code>@logger.catch(reraise=True)\ndef download_osm(\n    area: str,\n    output_dir: str,\n    selector: str,\n    discard: Optional[Dict[str, str]] = None,\n):\n    \"\"\"Download OSM elements for the given areas and selector.\n\n    Args:\n        output_dir (str): Output directory.\n        selector (str): OSM tag to select elements.\n\n            Example: [\"leisure=swimming_pool\"](https://wiki.openstreetmap.org/wiki/Tag:leisure%3Dswimming_pool)\n\n        area (str): Name of area to download.\n            Can be city, state, country, etc.\n\n        discard (Optional[dict[str, str]], optional): Discard elements matching\n            any of the given tags.\n            Defaults to None.\n            Example: {\"location\": \"indoor\", \"building\": \"yes\"}\n    \"\"\"\n    output_path = Path(output_dir)\n    output_path.mkdir(exist_ok=True, parents=True)\n\n    discard = discard or {}\n\n    logger.info(f\"Downloading osm data for {area}\")\n    elements = [\n        element\n        for element in get_elements(selector, area=area)\n        if all(element.get(\"tags\", {}).get(k) != v for k, v in discard.items())\n    ]\n\n    output_file = output_path / f\"{area}.json\"\n    logger.info(f\"Writing {len(elements)} elements to {output_file}\")\n    output_file.write_text(json.dumps(elements))\n    logger.success(\"Done!\")\n</code></pre>"},{"location":"api/#osm_ai_helper.group_elements_and_download_tiles.group_elements_and_download_tiles","title":"<code>osm_ai_helper.group_elements_and_download_tiles.group_elements_and_download_tiles(elements_file, output_dir, mapbox_token, zoom=18)</code>","text":"<p>Groups the elements by tile and downloads the satellite image corresponding to the tile.</p> <p>Parameters:</p> Name Type Description Default <code>input_annotation_file</code> <code>str</code> <p>Path to the JSON file containing OSM elements. See download_osm.</p> required <code>output_dir</code> <code>str</code> <p>Output directory. The images and annotations will be saved in this directory. The images will be saved as JPEG files and the annotations as JSON files. The names of the files will be in the format <code>{zoom}_{tile_col}_{tile_row}</code>.</p> required <code>mapbox_token</code> <code>str</code> <p>Mapbox token.</p> required <code>zoom</code> <code>int</code> <p>Zoom level of the tiles to download. See https://docs.mapbox.com/help/glossary/zoom-level/. Defaults to 18.</p> <code>18</code> Source code in <code>src/osm_ai_helper/group_elements_and_download_tiles.py</code> <pre><code>@logger.catch(reraise=True)\ndef group_elements_and_download_tiles(\n    elements_file: str, output_dir: str, mapbox_token: str, zoom: int = 18\n):\n    \"\"\"\n    Groups the elements by tile and downloads the satellite image corresponding to the tile.\n\n    Args:\n        input_annotation_file (str): Path to the JSON file containing OSM elements.\n            See [download_osm](osm_ai_helper.download_osm.download_osm).\n        output_dir (str): Output directory.\n            The images and annotations will be saved in this directory.\n            The images will be saved as JPEG files and the annotations as JSON files.\n            The names of the files will be in the format `{zoom}_{tile_col}_{tile_row}`.\n        mapbox_token (str): [Mapbox](https://console.mapbox.com/) token.\n        zoom (int, optional): Zoom level of the tiles to download.\n            See https://docs.mapbox.com/help/glossary/zoom-level/.\n            Defaults to 18.\n    \"\"\"\n    annotation_path = Path(elements_file)\n    output_path = Path(output_dir)\n    output_path.mkdir(exist_ok=True, parents=True)\n\n    elements = json.loads(annotation_path.read_text())\n\n    logger.info(\"Grouping elements by tile\")\n    grouped = group_elements_by_tile(elements, zoom)\n\n    total = len(grouped)\n    n = 0\n    logger.info(\"Downloading tiles and writing annotation\")\n    for (tile_col, tile_row), group in grouped.items():\n        if n % 50 == 0:\n            logger.info(f\"Processed {n}/{total} tiles\")\n        n += 1\n        output_name = f\"{zoom}_{tile_col}_{tile_row}\"\n        image_name = f\"{output_path / output_name}.jpg\"\n        annotation_name = f\"{output_path / output_name}.json\"\n        if not Path(image_name).exists():\n            image = download_tile(zoom, tile_col, tile_row, mapbox_token)\n            image.save(image_name)\n        if not Path(annotation_name).exists():\n            Path(annotation_name).write_text(\n                json.dumps(\n                    {\n                        \"elements\": group,\n                    }\n                )\n            )\n</code></pre>"},{"location":"api/#utils","title":"utils","text":""},{"location":"api/#osm_ai_helper.utils.osm","title":"<code>osm_ai_helper.utils.osm</code>","text":""},{"location":"api/#osm_ai_helper.utils.osm.get_area_id","title":"<code>get_area_id(area_name)</code>","text":"<p>Get the Nominatim ID of an area.</p> <p>Uses the Nominatim API.</p> <p>Parameters:</p> Name Type Description Default <code>area_name</code> <code>str</code> <p>The name of the area.</p> required <p>Returns:</p> Type Description <code>Optional[int]</code> <p>Optional[int]: The Nominatim ID of the area.</p> Source code in <code>src/osm_ai_helper/utils/osm.py</code> <pre><code>def get_area_id(area_name: str) -&gt; Optional[int]:\n    \"\"\"\n    Get the Nominatim ID of an area.\n\n    Uses the [Nominatim API](https://nominatim.org/release-docs/develop/api/Search/).\n\n    Args:\n        area_name (str): The name of the area.\n\n    Returns:\n        Optional[int]: The Nominatim ID of the area.\n    \"\"\"\n    response = requests.get(\n        f\"https://nominatim.openstreetmap.org/search?q={area_name}&amp;format=json\",\n        headers={\"User-Agent\": \"Mozilla/5.0\"},\n    )\n    response.raise_for_status()\n    response_json = json.loads(response.content.decode())\n    for area in response_json:\n        osm_type = area.get(\"osm_type\")\n        osm_id = area.get(\"osm_id\")\n        if osm_type == \"way\":\n            return osm_id + 2400000000\n        if osm_type == \"relation\":\n            return osm_id + 3600000000\n</code></pre>"},{"location":"api/#osm_ai_helper.utils.osm.get_elements","title":"<code>get_elements(selector, area=None, bbox=None)</code>","text":"<p>Get elements from OpenStreetMap using the Overpass API.</p> <p>Uses the Overpass API.</p> <p>Parameters:</p> Name Type Description Default <code>selector</code> <code>str</code> <p>The selector to use. Example: \"leisure=swimming_pool\"</p> required <code>area</code> <code>Optional[str]</code> <p>The area to search in. Can be city, state, country, etc. Defaults to None.</p> <code>None</code> <code>bbox</code> <code>Optional[Tuple[float, float, float, float]]</code> <p>The bounding box to search in. Defaults to None. Format: https://wiki.openstreetmap.org/wiki/Overpass_API/Language_Guide#The_bounding_box</p> <code>None</code> <p>Returns:</p> Type Description <code>list[dict]</code> <p>The elements found.</p> Source code in <code>src/osm_ai_helper/utils/osm.py</code> <pre><code>def get_elements(\n    selector: str,\n    area: Optional[str] = None,\n    bbox: Optional[Tuple[float, float, float, float]] = None,\n) -&gt; list[dict]:\n    \"\"\"\n    Get elements from OpenStreetMap using the Overpass API.\n\n    Uses the [Overpass API](https://wiki.openstreetmap.org/wiki/Overpass_API/Language_Guide).\n\n    Args:\n        selector (str): The selector to use.\n            Example: \"leisure=swimming_pool\"\n        area (Optional[str], optional): The area to search in.\n            Can be city, state, country, etc.\n            Defaults to None.\n\n        bbox (Optional[Tuple[float, float, float, float]], optional): The bounding box to search in.\n            Defaults to None.\n            Format: https://wiki.openstreetmap.org/wiki/Overpass_API/Language_Guide#The_bounding_box\n\n    Returns:\n        The elements found.\n    \"\"\"\n    query = \"[out:json];\"\n\n    if area:\n        area_id = get_area_id(area)\n        query += f\"area({area_id})-&gt;.searchArea;(way[{selector}](area.searchArea););\"\n    elif bbox:\n        bbox_str = \",\".join(map(str, bbox))\n        query += f\"(way[{selector}]({bbox_str}););\"\n    else:\n        raise ValueError(\"area or bbox must be provided\")\n\n    query += \" out body geom;\"\n\n    response = requests.get(\n        \"https://overpass-api.de/api/interpreter\",\n        params={\"data\": query},\n        headers={\"User-Agent\": \"Mozilla/5.0\"},\n    )\n    response.raise_for_status()\n    response_json = json.loads(response.content.decode())\n    return response_json[\"elements\"]\n</code></pre>"},{"location":"api/#osm_ai_helper.utils.plots","title":"<code>osm_ai_helper.utils.plots</code>","text":""},{"location":"api/#osm_ai_helper.utils.plots.show_vlm_entry","title":"<code>show_vlm_entry(entry)</code>","text":"<p>Extracts image and points from entry and draws the points.</p> <p>Parameters:</p> Name Type Description Default <code>entry</code> <code>dict</code> <p>Dataset entry generated by convert_to_vlm_dataset. Expected format:</p> <pre><code>entry = {\n    \"messages\": [\n        { \"role\": \"user\",\n        \"content\" : [\n            {\"type\" : \"text\",  \"text\"  : instruction},\n            {\"type\" : \"image\", \"image\" : image} ]\n        },\n        { \"role\" : \"assistant\",\n        \"content\" : [\n            {\"type\" : \"text\",  \"text\"  : str(points)} ]\n        },\n    ]\n}\n</code></pre> required <p>Returns:</p> Name Type Description <code>Image</code> <p>Image with points drawn.</p> Source code in <code>src/osm_ai_helper/utils/plots.py</code> <pre><code>def show_vlm_entry(entry):\n    \"\"\"\n    Extracts image and points from entry and draws the points.\n\n    Args:\n        entry (dict): Dataset entry generated by\n            [convert_to_vlm_dataset](osm_ai_helper.convert_to_vlm_dataset.convert_to_vlm_dataset).\n            Expected format:\n\n            ```py\n            entry = {\n                \"messages\": [\n                    { \"role\": \"user\",\n                    \"content\" : [\n                        {\"type\" : \"text\",  \"text\"  : instruction},\n                        {\"type\" : \"image\", \"image\" : image} ]\n                    },\n                    { \"role\" : \"assistant\",\n                    \"content\" : [\n                        {\"type\" : \"text\",  \"text\"  : str(points)} ]\n                    },\n                ]\n            }\n            ```\n\n    Returns:\n        Image: Image with points drawn.\n    \"\"\"\n    messages = entry[\"messages\"]\n    image = messages[0][\"content\"][1][\"image\"]\n    width, height = image.size\n    points = eval(messages[1][\"content\"][0][\"text\"])\n    draw = ImageDraw.Draw(image)\n\n    for point in points:\n        draw.circle((point[0] * width, point[1] * height), 5, fill=\"red\")\n\n    return image\n</code></pre>"},{"location":"api/#osm_ai_helper.utils.tiles","title":"<code>osm_ai_helper.utils.tiles</code>","text":""},{"location":"api/#osm_ai_helper.utils.tiles.group_elements_by_tile","title":"<code>group_elements_by_tile(elements, zoom)</code>","text":"<p>Broup elements by the tiles they belong to, based on the zoom level.</p> <p>Each MAPBOX tile is a 512x512 pixel image.</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code>List[Dict]</code> <p>List of elements from download_osm.</p> required <code>zoom</code> <code>int</code> <p>Zoom level. See https://docs.mapbox.com/help/glossary/zoom-level/.</p> required <p>Returns:</p> Type Description <p>dict[tuple, list[dict]]: Grouped elements.</p> Source code in <code>src/osm_ai_helper/utils/tiles.py</code> <pre><code>def group_elements_by_tile(elements: List[Dict], zoom: int):\n    \"\"\"Broup elements by the tiles they belong to, based on the zoom level.\n\n    Each MAPBOX tile is a 512x512 pixel image.\n\n    Args:\n        elements (List[Dict]): List of elements from\n            [download_osm](osm_ai_helper.download_osm.download_osm).\n        zoom (int): Zoom level. See https://docs.mapbox.com/help/glossary/zoom-level/.\n\n    Returns:\n        dict[tuple, list[dict]]: Grouped elements.\n    \"\"\"\n    grouped: dict[tuple, list[dict]] = defaultdict(list)\n\n    for element in elements:\n        pixel_polygon = []\n        for point in element[\"geometry\"]:\n            pixel_point = lat_lon_to_pixel_col_row(point[\"lat\"], point[\"lon\"], zoom)\n            pixel_polygon.append(pixel_point)\n\n        pixel_polygon = np.array(pixel_polygon, dtype=np.int32)\n\n        tiles = map(tuple, np.unique(pixel_polygon // TILE_SIZE, axis=0))\n        for group in tiles:\n            grouped[group].append(element)\n\n    return grouped\n</code></pre>"},{"location":"customization/","title":"\ud83c\udfa8 Customization Guide","text":"<p>This Blueprint is designed to be flexible and easily adaptable to your specific needs. This guide will walk you through some key areas you can customize to make the Blueprint your own.</p>"},{"location":"customization/#changing-the-model","title":"\ud83e\udde0 Changing the Model","text":""},{"location":"customization/#modifying-the-system-prompt","title":"\ud83d\udcdd Modifying the system Prompt","text":""},{"location":"customization/#other-customization-ideas","title":"\ud83d\udca1 Other Customization Ideas","text":"<ul> <li>other ideas..</li> </ul>"},{"location":"customization/#contributing-to-the-blueprint","title":"\ud83e\udd1d Contributing to the Blueprint","text":"<p>Want to help improve or extend this Blueprint? Check out the Future Features &amp; Contributions Guide to see how you can contribute your ideas, code, or feedback to make this Blueprint even better!</p>"},{"location":"future-features-contributions/","title":"\ud83d\ude80 Future Features &amp; Contributions","text":"<p>This Blueprint is an evolving project designed to grow with the help of the open-source community. Whether you\u2019re an experienced developer or just starting, there are many ways you can contribute and help shape the future of this tool.</p>"},{"location":"future-features-contributions/#how-you-can-contribute","title":"\ud83c\udf1f How You Can Contribute","text":""},{"location":"future-features-contributions/#enhance-the-blueprint","title":"\ud83d\udee0\ufe0f Enhance the Blueprint","text":"<ul> <li>Check the Issues page to see if there are feature requests you'd like to implement</li> <li>Refer to our Contribution Guide for more details on contributions</li> </ul>"},{"location":"future-features-contributions/#extensibility-ideas","title":"\ud83c\udfa8 Extensibility Ideas","text":"<p>This Blueprint is designed to be a foundation you can build upon. By extending its capabilities, you can open the door to new applications, improve user experience, and adapt the Blueprint to address other use cases. Here are a few ideas for how you can expand its potential:</p> <p>We\u2019d love to see how you can enhance this Blueprint! If you create improvements or extend its capabilities, consider contributing them back to the project so others in the community can benefit from your work. Check out our Contributions Guide to get started!</p>"},{"location":"future-features-contributions/#share-your-ideas","title":"\ud83d\udca1 Share Your Ideas","text":"<p>Got an idea for how this Blueprint could be improved? You can share your suggestions through GitHub Discussions.</p>"},{"location":"future-features-contributions/#build-new-blueprints","title":"\ud83c\udf0d Build New Blueprints","text":"<p>This project is part of a larger initiative to create a collection of reusable starter code solutions that use open-source AI tools. If you\u2019re inspired to create your own Blueprint, you can use the Blueprint-template to get started.</p> <p>Your contributions help make this Blueprint better for everyone \ud83c\udf89</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Get started with this Blueprint using one of the options below:</p>"},{"location":"getting-started/#option-1","title":"Option 1:","text":""},{"location":"getting-started/#option-2","title":"Option 2:","text":""},{"location":"step-by-step-guide/","title":"Step-by-Step Guide: How this Blueprint Works","text":""},{"location":"step-by-step-guide/#overview","title":"Overview","text":""},{"location":"step-by-step-guide/#step-1","title":"Step 1","text":""},{"location":"step-by-step-guide/#step-2","title":"Step 2","text":""},{"location":"step-by-step-guide/#step-3","title":"Step 3","text":""},{"location":"step-by-step-guide/#customizing-the-blueprint","title":"\ud83c\udfa8 Customizing the Blueprint","text":"<p>To better understand how you can tailor this Blueprint to suit your specific needs, please visit the Customization Guide.</p>"},{"location":"step-by-step-guide/#contributing-to-the-blueprint","title":"\ud83e\udd1d Contributing to the Blueprint","text":"<p>Want to help improve or extend this Blueprint? Check out the Future Features &amp; Contributions Guide to see how you can contribute your ideas, code, or feedback to make this Blueprint even better!</p>"}]}